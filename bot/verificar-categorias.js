// Script de prueba para verificar la reorganizaci√≥n de categor√≠as
const { query } = require('./modulos/conexion');

async function verificarReorganizacionCategorias() {
  console.log('üîç Verificando reorganizaci√≥n de categor√≠as...\n');

  try {
    // 1. Verificar productos con categor√≠a ID=1 (Laptops gen√©rica)
    console.log('üìä PASO 1: Verificando productos con categor√≠a ID=1');
    const productosCategoria1 = await query('productos', 'select', {
      filters: { id_categoria: 1 },
      columns: 'id_producto, nombre, precio, especificaciones_texto'
    });
    
    if (productosCategoria1.data && productosCategoria1.data.length > 0) {
      console.log(`   ‚ö†Ô∏è  Se encontraron ${productosCategoria1.data.length} productos con categor√≠a ID=1:`);
      productosCategoria1.data.forEach(p => {
        console.log(`   - ${p.nombre} ($${p.precio})`);
      });
    } else {
      console.log('   ‚úÖ No hay productos con categor√≠a ID=1');
    }
    console.log('');

    // 2. Verificar categor√≠as existentes
    console.log('üìã PASO 2: Verificando categor√≠as existentes');
    const categorias = await query('categorias_electronicas', 'select', {
      columns: 'id_categoria, nombre, descripcion'
    });
    
    if (categorias.data && categorias.data.length > 0) {
      console.log('   Categor√≠as disponibles:');
      categorias.data.forEach(cat => {
        console.log(`   - ID ${cat.id_categoria}: ${cat.nombre}`);
      });
    }
    console.log('');

    // 3. Verificar distribuci√≥n de productos por categor√≠a
    console.log('üìà PASO 3: Distribuci√≥n actual de productos por categor√≠a');
    const distribucion = await query('vista_productos_detalle', 'select', {
      columns: 'categoria, COUNT(*) as cantidad'
    });
    
    if (distribucion.data && distribucion.data.length > 0) {
      console.log('   Distribuci√≥n de productos:');
      distribucion.data.forEach(dist => {
        console.log(`   - ${dist.categoria}: ${dist.cantidad || 0} productos`);
      });
    }
    console.log('');

    // 4. Verificar productos gaming
    console.log('üéÆ PASO 4: Verificando productos gaming');
    const productosGaming = await query('productos', 'select', {
      like: { especificaciones_texto: 'gaming' },
      columns: 'nombre, precio, especificaciones_texto'
    });
    
    if (productosGaming.data && productosGaming.data.length > 0) {
      console.log(`   Se encontraron ${productosGaming.data.length} productos gaming:`);
      productosGaming.data.forEach(p => {
        console.log(`   - ${p.nombre} ($${p.precio})`);
      });
    } else {
      console.log('   No se encontraron productos gaming espec√≠ficos');
    }
    console.log('');

    console.log('‚úÖ Verificaci√≥n completada!');
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  }
}

// Funci√≥n para ejecutar la reorganizaci√≥n
async function ejecutarReorganizacion() {
  console.log('üîÑ Iniciando reorganizaci√≥n de categor√≠as...\n');
  
  try {
    // Aqu√≠ podr√≠as ejecutar el script SQL de reorganizaci√≥n
    // Por ahora solo mostraremos las consultas recomendadas
    
    console.log('üìù Consultas SQL recomendadas para ejecutar:');
    console.log('');
    console.log('1. Verificar productos actuales con ID=1:');
    console.log('   SELECT * FROM productos WHERE id_categoria = 1;');
    console.log('');
    console.log('2. Reasignar productos gaming:');
    console.log(`   UPDATE productos SET id_categoria = (SELECT id_categoria FROM categorias_electronicas WHERE nombre = 'Laptops Gamer')
   WHERE id_categoria = 1 AND (LOWER(especificaciones_texto) LIKE '%gaming%' OR LOWER(especificaciones_texto) LIKE '%rtx%');`);
    console.log('');
    console.log('3. Ver script completo en: script_reorganizar_categorias.sql');
    
  } catch (error) {
    console.error('‚ùå Error durante la reorganizaci√≥n:', error);
  }
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Herramienta de Reorganizaci√≥n de Categor√≠as ElectronicsJS\n');
  
  // Verificar primero
  await verificarReorganizacionCategorias();
  
  console.log('\n' + '='.repeat(60) + '\n');
  
  // Mostrar plan de reorganizaci√≥n
  await ejecutarReorganizacion();
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  verificarReorganizacionCategorias,
  ejecutarReorganizacion
};
